##################################################################################
# VARIABLES
##################################################################################

#variable "aws_access_key" {}
#variable "aws_secret_key" {}
variable "private_key_path" {}
variable "key_name" {}
variable "region" {
  default = "us-west-2"
}
variable "network_address_space" {
  default = "172.16.0.0/16"
}
variable "zone1_subnet1_address_space" {
  default = "172.16.1.0/24"
}

variable "zone1_subnet2_address_space" {
  default = "172.16.4.0/24"
}
variable "zone1_subnet3_address_space" {
  default = "172.16.8.0/24"
}

####Zone2 ###
variable "zone2_subnet1_address_space" {
  default = "172.16.2.0/24"
}

variable "zone2_subnet2_address_space" {
  default = "172.16.5.0/24"
}
variable "zone2_subnet3_address_space" {
  default = "172.16.9.0/24"
}

####Zone3 ###
variable "zone3_subnet1_address_space" {
  default = "172.16.3.0/24"
}

variable "zone3_subnet2_address_space" {
  default = "172.16.6.0/24"
}
variable "zone3_subnet3_address_space" {
  default = "172.16.10.0/24"
}

##################################################################################
# PROVIDERS
##################################################################################

provider "aws" {
  #access_key = var.aws_access_key
  #secret_key = var.aws_secret_key
  region     = var.region
  profile = "security"
}

##################################################################################
# DATA
##################################################################################

data "aws_availability_zones" "available" {}

data "aws_ami" "aws-linux" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn-ami-hvm*"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}

##################################################################################
# RESOURCES
##################################################################################

# NETWORKING #
resource "aws_vpc" "vpc" {
  cidr_block           = var.network_address_space
  enable_dns_hostnames = "true"

}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.vpc.id

}
resource "aws_nat_gateway" "gw" {
  allocation_id = aws_eip.nat.id
  subnet_id      = aws_subnet.Public_subnet_publicA.id
  depends_on = [aws_internet_gateway.igw]
}

resource "aws_subnet" "Public_subnet_publicA" {
  cidr_block              = var.zone1_subnet1_address_space
  vpc_id                  = aws_vpc.vpc.id
  map_public_ip_on_launch = "true"
  availability_zone       = data.aws_availability_zones.available.names[0]

}

resource "aws_subnet" "Private_Subnet_AppA" {
  cidr_block              = var.zone1_subnet2_address_space
  vpc_id                  = aws_vpc.vpc.id
  #map_public_ip_on_launch = "true"
  availability_zone       = data.aws_availability_zones.available.names[0]

}

resource "aws_subnet" "Private_Subnet_DbA" {
  cidr_block              = var.zone1_subnet3_address_space
  vpc_id                  = aws_vpc.vpc.id
  #map_public_ip_on_launch = "true"
  availability_zone       = data.aws_availability_zones.available.names[0]

}

############ ZONE-2##################
resource "aws_subnet" "Public_subnet_publicB" {
  cidr_block              = var.zone2_subnet1_address_space
  vpc_id                  = aws_vpc.vpc.id
  map_public_ip_on_launch = "true"
  availability_zone       = data.aws_availability_zones.available.names[1]

}

resource "aws_subnet" "Private_Subnet_AppB" {
  cidr_block              = var.zone2_subnet2_address_space
  vpc_id                  = aws_vpc.vpc.id
  
  availability_zone       = data.aws_availability_zones.available.names[1]

}

resource "aws_subnet" "Private_Subnet_DbB" {
  cidr_block              = var.zone2_subnet3_address_space
  vpc_id                  = aws_vpc.vpc.id
  availability_zone       = data.aws_availability_zones.available.names[1]

}
############ ZONE-3##################
resource "aws_subnet" "Public_subnet_publicC" {
  cidr_block              = var.zone3_subnet1_address_space
  vpc_id                  = aws_vpc.vpc.id
  map_public_ip_on_launch = "true"
  availability_zone       = data.aws_availability_zones.available.names[2]

}

resource "aws_subnet" "Private_Subnet_AppC" {
  cidr_block              = var.zone3_subnet2_address_space
  vpc_id                  = aws_vpc.vpc.id
  #map_public_ip_on_launch = "true"
  availability_zone       = data.aws_availability_zones.available.names[2]

}

resource "aws_subnet" "Private_Subnet_DbC" {
  cidr_block              = var.zone3_subnet3_address_space
  vpc_id                  = aws_vpc.vpc.id
 # map_public_ip_on_launch = "true"
  availability_zone       = data.aws_availability_zones.available.names[2]

}

# ROUTING #
resource "aws_route_table" "rtb" {
  vpc_id = aws_vpc.vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
}

resource "aws_route_table_association" "rta-subnet1" {
  subnet_id      = aws_subnet.Public_subnet_publicA.id
  route_table_id = aws_route_table.rtb.id
}

resource "aws_route_table_association" "rta-subnet2" {
  subnet_id      = aws_subnet.Public_subnet_publicB.id
  route_table_id = aws_route_table.rtb.id
}

resource "aws_route_table_association" "rta-subnet3" {
  subnet_id      = aws_subnet.Public_subnet_publicC.id
  route_table_id = aws_route_table.rtb.id
}


# SECURITY GROUPS #
resource "aws_security_group" "elb-sg" {
  name   = "nginx_elb_sg"
  vpc_id = aws_vpc.vpc.id

  #Allow HTTP from anywhere
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  #allow all outbound
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# LOAD BALANCER #
resource "aws_elb" "web" {
  name = "nginx-elb"

  subnets         = [aws_subnet.Public_subnet_publicA.id, aws_subnet.Public_subnet_publicB.id, aws_subnet.Public_subnet_publicC.id]
  security_groups = [aws_security_group.elb-sg.id]
  instances       = [aws_instance.nginx1.id, aws_instance.nginx2.id, aws_instance.nginx3.id]

  listener {
    instance_port     = 80
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }
}

# Nginx security group 
resource "aws_security_group" "nginx-sg" {
  name   = "nginx_sg"
  vpc_id = aws_vpc.vpc.id

  # SSH access from anywhere
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # HTTP access from anywhere
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = [var.network_address_space]
  }

  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# INSTANCES #
resource "aws_instance" "nginx1" {
  ami                    = data.aws_ami.aws-linux.id
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.Public_subnet_publicA.id
  vpc_security_group_ids = [aws_security_group.nginx-sg.id]
  key_name               = var.key_name

  connection {
    type        = "ssh"
    host        = self.public_ip
    user        = "ec2-user"
    private_key = file(var.private_key_path)

  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install nginx -y",
      "sudo service nginx start",
      "sudo rm /usr/share/nginx/html/index.html",
      "echo '<html><head><title>Blue Team Server</title></head><body style=\"background-color:#1F778D\"><p style=\"text-align: center;\"><span style=\"color:#FFFFFF;\"><span style=\"font-size:28px;\">Blue Team</span></span></p></body></html>' | sudo tee /usr/share/nginx/html/index.html"
    ]
  }
}

resource "aws_instance" "nginx2" {
  ami                    = data.aws_ami.aws-linux.id
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.Public_subnet_publicB.id
  vpc_security_group_ids = [aws_security_group.nginx-sg.id]
  key_name               = var.key_name

  connection {
    type        = "ssh"
    host        = self.public_ip
    user        = "ec2-user"
    private_key = file(var.private_key_path)

  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install nginx -y",
      "sudo service nginx start",
      "sudo rm /usr/share/nginx/html/index.html",
      "echo '<html><head><title>GREEN Team Server</title></head><body style=\"background-color:#77A032\"><p style=\"text-align: center;\"><span style=\"color:#FFFFFF;\"><span style=\"font-size:28px;\">GREEN Team</span></span></p></body></html>' | sudo tee /usr/share/nginx/html/index.html"
    ]
  }
}


resource "aws_instance" "nginx3" {
  ami                    = data.aws_ami.aws-linux.id
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.Public_subnet_publicB.id
  vpc_security_group_ids = [aws_security_group.nginx-sg.id]
  key_name               = var.key_name

  connection {
    type        = "ssh"
    host        = self.public_ip
    user        = "ec2-user"
    private_key = file(var.private_key_path)

  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install nginx -y",
      "sudo service nginx start",
      "sudo rm /usr/share/nginx/html/index.html",
      "echo '<html><head><title>RED Team Server</title></head><body style=\"background-color:#FF0000\"><p style=\"text-align: center;\"><span style=\"color:#FFFFFF;\"><span style=\"font-size:28px;\">RED Team</span></span></p></body></html>' | sudo tee /usr/share/nginx/html/index.html"
    ]
  }
}
##################################################################################
# OUTPUT
##################################################################################

output "aws_elb_public_dns" {
  value = aws_elb.web.dns_name
}
